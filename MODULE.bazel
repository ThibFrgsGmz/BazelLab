""" Bazel Modules

Ce fichier définit les modules Bazel nécessaires pour le projet. Il contient également des instructions
sur la gestion des dépendances et des plates-formes de test.

Si `MODULE.bazel.lock` change localement, cela signifie que la plate-forme hôte n'a pas encore été ajoutée
au fichier de verrouillage. Exécuter `bazel mod deps` fournit une mise à jour canonique de `MODULE.bazel.lock`.
Créez une PR avec ces modifications pour inclure la plate-forme hôte.

Les plates-formes testées avec GitHub Actions sont maintenues à jour automatiquement. D'autres plates-formes
peuvent se désynchroniser en cas de changement de dépendance et doivent être mises à jour avec une PR de la
même manière qu'une plate-forme est ajoutée.
"""

# Déclaration du module principal
module(name = "bazel_lab")

# Règle pour récupérer des archives HTTP
http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)

# It is not clear in Bazel what is the best practice for using http_archive.
# If you call http_archive without any kind of check, you could call it two times
# with the same name and different parameters and you would not get any warning/error.
#
# One option is to check if it is already available in the existing_rules and only
# call http_archive if it is not present. In the else you could display a message in
# case that was already present but in reality you would only want a warning/error if was
# already called with different parameters (different library version for example).
#
# Another option is to wrap the http_archive in a maybe call but this will also not display
# a warning. It behaves like the if check with the advantage that the name has not to be
# repeated
# Règle pour traiter les dépendances facultatives
maybe = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:utils.bzl",
    "maybe",
)

# Déclaration des dépendances
bazel_dep(name = "bazel_skylib", version = "1.5.0")

bazel_dep(
    name = "abseil-cpp",
    version = "20240116.0",
    repo_name = "com_google_absl",
)
bazel_dep(
    name = "re2",
    version = "2024-02-01",
    repo_name = "com_googlesource_code_re2",
)
bazel_dep(
    name = "googletest",
    version = "1.14.0.bcr.1",
    repo_name = "com_google_googletest",
)

google_benchmark_version = "1.8.3"

# Déclaration de la dépendance Google Benchmark
bazel_dep(
    name = "google_benchmark",
    version = google_benchmark_version,
    repo_name = "com_github_google_benchmark",
)

# Déclaration de la dépendance Bazel Clang Tidy
clang_tidy_version = "d2aecc583d14c9554febeab185833c1e8cce5384"
http_archive(
    name = "bazel_clang_tidy",
    sha256 = "89c198a9f544beac119bb41904d16d8870686ccb5fe946442c1576934c9e6869",
    strip_prefix = "bazel_clang_tidy-{0}".format(clang_tidy_version),
    urls = ["https://github.com/erenon/bazel_clang_tidy/archive/{0}.tar.gz".format(clang_tidy_version)],
)

# To use the latest version of FuzzTest, update this regularly to the latest
# commit in the main branch: https://github.com/google/fuzztest/commits/main
FUZZTEST_COMMIT = "62cf00c7341eb05d128d0a3cbce79ac31dbda032"
http_archive(
    name = "com_google_fuzztest",
    strip_prefix = "fuzztest-" + FUZZTEST_COMMIT,
    url = "https://github.com/google/fuzztest/archive/" + FUZZTEST_COMMIT + ".zip",
)
