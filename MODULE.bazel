""" Bazel Modules

Ce fichier définit les modules Bazel nécessaires pour le projet. Il contient également des instructions
sur la gestion des dépendances et des plates-formes de test.

Si `MODULE.bazel.lock` change localement, cela signifie que la plate-forme hôte n'a pas encore été ajoutée
au fichier de verrouillage. Exécuter `bazel mod deps` fournit une mise à jour canonique de `MODULE.bazel.lock`.
Créez une PR avec ces modifications pour inclure la plate-forme hôte.

Les plates-formes testées avec GitHub Actions sont maintenues à jour automatiquement. D'autres plates-formes
peuvent se désynchroniser en cas de changement de dépendance et doivent être mises à jour avec une PR de la
même manière qu'une plate-forme est ajoutée.
"""

# NOTE: When editing this file, also update the lockfile.
#   bazel mod deps --lockfile_mode=update

# Déclaration du module principal
module(name = "bazel_lab")

# Règle pour récupérer des archives HTTP
http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)

bazel_dep(name = "rules_cc", version = "0.0.9")

# Déclaration des dépendances
bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "abseil-cpp", version = "20240116.1")
bazel_dep(name = "re2", version = "2024-03-01")
bazel_dep(name = "googletest", version = "1.14.0.bcr.1")
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
bazel_dep(name = "rules_fuzzing", version = "0.5.1")

google_benchmark_version = "1.8.3"

bazel_dep(name = "google_benchmark", version = google_benchmark_version)

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "4689147cf4b1c2d507fd8bbb8eb748a7bbaad4ef",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    # configure_coverage_tool = True,
    python_version = "3.12",
)
use_repo(python, "python_versions", "pythons_hub")

register_toolchains("@pythons_hub//:all")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "python_packages",
    # python_interpreter_target = interpreter,
    python_version = "3.12",
    requirements_lock = "//third_party/pip:requirements_lock.txt",
)
use_repo(pip, "python_packages")

http_archive(
    name = "com_intel_cib",
    build_file = "//third_party/cib:BUILD.cib.bazel",
    sha256 = "e46a155ba042241f625637bf770ff8f2b3537d9827c8537578aca7a2790bfae8",
    strip_prefix = "compile-time-init-build-1.7.0",
    url = "https://github.com/intel/compile-time-init-build/archive/refs/tags/v1.7.0.tar.gz",
)
