{
	// This is a checked-in VSCode workspace configuration file that can be used
	// instead of directly opening $FUCHSIA_DIR in VSCode.
	//
	// It's an opt-in workspace configuration that contains settings for:
	//  - vscode itself
	//  - LSP settings for working correctly with the fuchsia.git checkout
	//  - etc.
	//
	// In terms of precedence, VSCode uses the following order in which settings
	// are applied (merged together).
	//
	//  0) default settings
	//  1) user's settings
	//  2) remote machine settings
	//  3) workspace settings  (this file)
	//  4) workspace folder settings
	//
	//
	// For details, see:
	// https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence
	// Liste des dossiers du workspace
	"folders": [
		{
			"path": ".."
		}
	],
	// Extensions recommandées
	"extensions": {
		"recommendations": [
			"bazelbuild.vscode-bazel",
			"eamodio.gitlens",
			"ms-vscode.cpptools",
			"llvm-vs-code-extensions.vscode-clangd",
			"ms-vscode.cpptools-extension-pack",
			"ms-vscode.cpptools-themes",
			"rjmacarthy.twinny",
			"xaver.clang-format",
			"matepek.testmate-cpp",
			"ms-python.python",
			"ms-sarifvscode.sarif-viewer",
			"ms-python.debugpy"
		],
		"unwantedRecommendations": []
	},
	// Paramètres de l'éditeur
	"settings": {
		"files.associations": {
			"*.h": "cpp",
			"*.hpp": "cpp",
			"*.cc": "cpp",
			// ".bazelrc": "python",
			// ".bazeliskrc": "python"
		},
		"C_Cpp.default.cppStandard": "c++20",
		"C_Cpp.default.compilerPath": "/usr/bin/g++",
		"C_Cpp.default.intelliSenseMode": "gcc-x64",
		"C_Cpp.default.includePath": [
			"${workspaceFolder}/**",
			"${workspaceFolder}/bazel-<project-name>/external/**"
		],
		"C_Cpp.default.browse.path": [
			"${workspaceFolder}",
			"${workspaceFolder}/bazel-<project-name>/external/**"
		],
		"C_Cpp.default.defines": [],
		"C_Cpp.errorSquiggles": "enabled",
		"C_Cpp.formatting": "clangFormat",
		"C_Cpp.intelliSenseEngine": "disabled",
		"clangd.arguments": [
			"--header-insertion=never",
			"--compile-commands-dir=${workspaceFolder}/compile_commands", // Chemin vers le répertoire contenant la compile database
			"-j=4", // Nombre de threads à utiliser pour l'analyse
			"--query-driver=**"
		],
		"clangd.semanticHighlighting.enabled": true, // Activation de la coloration sémantique
		"clangd.highlightInactiveParameter": true, // Mise en surbrillance des paramètres inactifs dans les fonctions
		"clangd.formatting.style": "file", // Utiliser le style de formatage spécifié dans un fichier .clang-format
		"bazel.buildifierExecutable": "/home/life/code/buildifier",
		"bazel.buildifierFixOnFormat": true,
		"editor.rulers": [
			80
		],
		"editor.formatOnSave": true,
		"editor.tabSize": 4,
		"files.insertFinalNewline": true,
		"files.trimTrailingWhitespace": true,
		"sarif-viewer.connectToGithubCodeScanning": "off"
	},
	// Configurations de lancement
	"launch": {
		"version": "0.2.0",
		"configurations": [
			{
				"name": "Launch Bazel Build",
				"type": "cppdbg",
				"request": "launch",
				"program": "${workspaceFolder}/bazel-bin/<your-target-path>",
				"args": [],
				"stopAtEntry": false,
				"cwd": "${workspaceFolder}",
				"environment": [],
				"externalConsole": false,
				"MIMode": "gdb",
				"setupCommands": [
					{
						"description": "Enable pretty-printing for gdb",
						"text": "-enable-pretty-printing",
						"ignoreFailures": true
					}
				],
				"preLaunchTask": "bazel-build",
				"miDebuggerPath": "/usr/bin/gdb"
			}
		]
	},
	// Tâches de construction
	"tasks": {
		"version": "2.0.0",
		"tasks": [
			{
				"label": "Check test",
				"type": "bazel",
				"command": "test",
				"targets": [
					"${input:pickTest}"
				],
				"options": [
					"--runs_per_test=9"
				]
			}
		],
		"inputs": [
			{
				"id": "pickTest",
				"type": "command",
				"command": "bazel.pickTarget",
				"args": {
					"query": "kind('.*_test', //src/...:*)",
					"placeHolder": "Which test to check?"
				}
			}
		]
	}
}
